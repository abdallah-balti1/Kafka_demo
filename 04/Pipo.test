import { ChangeDetectionStrategy, Component, signal, effect } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="flex h-screen bg-gray-100 font-sans">
      <!-- Barre latérale -->
      <aside class="w-64 bg-white p-4 flex flex-col shadow-lg">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Discussions</h2>
        <div class="flex-grow overflow-y-auto space-y-2">
          <!-- Liste des discussions -->
          <div
            *ngFor="let chat of chats()"
            (click)="selectChat(chat.id)"
            [ngClass]="{
              'bg-blue-100 text-blue-800 font-semibold': chat.id === selectedChatId(),
              'hover:bg-gray-200': chat.id !== selectedChatId()
            }"
            class="p-2 rounded-lg cursor-pointer transition-colors duration-200 flex items-center justify-between"
          >
            <span class="truncate">{{ chat.title }}</span>
            <button
              (click)="deleteChat(chat.id); $event.stopPropagation()"
              class="ml-2 text-gray-400 hover:text-red-500 transition-colors duration-200"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 11-2 0v6a1 1 0 112 0V8z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Bouton 'Nouvelle discussion' -->
        <button
          (click)="newChat()"
          class="mt-4 w-full bg-blue-500 text-white rounded-lg p-2 font-medium hover:bg-blue-600 transition-colors duration-200 shadow-md"
        >
          Nouvelle discussion
        </button>
      </aside>

      <!-- Zone de chat principale -->
      <main class="flex-grow flex flex-col p-6 bg-gray-200 shadow-inner rounded-lg m-4">
        <div class="flex-grow overflow-y-auto p-4 space-y-4 rounded-lg bg-white shadow-inner">
          <div *ngIf="messages().length === 0" class="text-center text-gray-500 italic">
            Commencez une nouvelle discussion.
          </div>
          <div *ngFor="let message of messages()" class="flex" [ngClass]="{'justify-end': message.isUser, 'justify-start': !message.isUser}">
            <div
              class="max-w-xs lg:max-w-md px-4 py-2 rounded-xl text-white shadow-md"
              [ngClass]="{'bg-blue-500 rounded-br-none': message.isUser, 'bg-gray-700 rounded-bl-none': !message.isUser}"
            >
              <p>{{ message.text }}</p>
            </div>
          </div>
        </div>

        <!-- Zone de saisie -->
        <div class="mt-4 flex rounded-lg overflow-hidden shadow-lg bg-white">
          <input
            #messageInput
            type="text"
            placeholder="Tapez votre message..."
            class="flex-grow px-4 py-3 text-gray-800 outline-none"
            (keydown.enter)="sendMessage(messageInput.value); messageInput.value = ''"
          />
          <button
            (click)="sendMessage(messageInput.value); messageInput.value = ''"
            class="bg-blue-600 text-white px-6 py-3 hover:bg-blue-700 transition-colors duration-200"
          >
            Envoyer
          </button>
        </div>
      </main>
    </div>
  `,
  styles: [`
    @import 'tailwindcss/base';
    @import 'tailwindcss/components';
    @import 'tailwindcss/utilities';

    /* Définir une hauteur minimale pour la zone de chat */
    main > div:first-child {
      min-height: 200px; /* Ajustez selon vos besoins */
    }
  `],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class App {
  // Liste des conversations
  chats = signal<{ id: number; title: string; messages: { text: string; isUser: boolean; }[] }[]>([]);
  // ID de la conversation actuellement sélectionnée
  selectedChatId = signal<number | null>(null);

  // Messages de la conversation sélectionnée
  messages = signal<{ text: string; isUser: boolean; }[]>([]);

  constructor() {
    // Effet pour mettre à jour les messages lorsque selectedChatId change
    effect(() => {
      const selectedId = this.selectedChatId();
      if (selectedId !== null) {
        const chat = this.chats().find(c => c.id === selectedId);
        this.messages.set(chat ? chat.messages : []);
      } else {
        this.messages.set([]);
      }
    });

    // Initialisation avec une discussion pour l'exemple
    this.chats.set([
      {
        id: 1,
        title: 'Discussion initiale',
        messages: [
          { text: "Bonjour, comment puis-je vous aider ?", isUser: false },
          { text: "Je voudrais ajouter une fonctionnalité.", isUser: true },
        ],
      },
    ]);
    this.selectedChatId.set(1);
  }

  // Crée une nouvelle conversation
  newChat(): void {
    const newId = this.chats().length > 0 ? Math.max(...this.chats().map(c => c.id)) + 1 : 1;
    this.chats.update(chats => [...chats, { id: newId, title: `Nouvelle discussion ${newId}`, messages: [] }]);
    this.selectedChatId.set(newId);
  }

  // Supprime une conversation
  deleteChat(id: number): void {
    this.chats.update(chats => chats.filter(chat => chat.id !== id));
    if (this.selectedChatId() === id) {
      this.selectedChatId.set(this.chats().length > 0 ? this.chats()[0].id : null);
    }
  }

  // Sélectionne une conversation existante
  selectChat(id: number): void {
    this.selectedChatId.set(id);
  }

  // Envoie un message
  sendMessage(text: string): void {
    if (!text.trim()) {
      return;
    }
    const currentChatId = this.selectedChatId();
    if (currentChatId !== null) {
      this.chats.update(chats => {
        return chats.map(chat => {
          if (chat.id === currentChatId) {
            return {
              ...chat,
              messages: [...chat.messages, { text, isUser: true }]
            };
          }
          return chat;
        });
      });
      // Simulation d'une réponse de l'assistant après un court délai
      setTimeout(() => {
        this.addAssistantMessage(currentChatId, "C'est une excellente question. L'IA est en train d'apprendre...");
      }, 1000);
    }
  }

  // Ajoute un message de l'assistant
  addAssistantMessage(chatId: number, text: string): void {
    this.chats.update(chats => {
      return chats.map(chat => {
        if (chat.id === chatId) {
          return {
            ...chat,
            messages: [...chat.messages, { text, isUser: false }]
          };
        }
        return chat;
      });
    });
  }
}

