Parfait ! Voici la solution compl√®te, proprement d√©coup√©e en trois fichiers, pour :

1. Afficher une discussion nouvellement cr√©√©e dans la liste (sidebar),


2. Griser et d√©sactiver les discussions qui ont plus d'une heure.




---

‚úÖ 1. discussion.service.ts

Ajoute le syst√®me d‚Äô√©v√©nements via un Subject.

import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';

export interface Discussion {
  id: number;
  name: string;
  startDate: string; // ou Date
  isExpired?: boolean;
}

@Injectable({
  providedIn: 'root'
})
export class DiscussionService {
  private discussions: Discussion[] = [];

  // Observable pour suivre les nouvelles discussions
  private newDiscussionSource = new Subject<Discussion>();
  public newDiscussion$ = this.newDiscussionSource.asObservable();

  constructor() {}

  getDiscussions(): Discussion[] {
    return this.discussions;
  }

  setDiscussions(discussions: Discussion[]) {
    const now = Date.now();
    this.discussions = discussions.map(disc => {
      const start = new Date(disc.startDate).getTime();
      disc.isExpired = now - start > 3600000; // > 1h
      return disc;
    });
  }

  emitNewDiscussion(disc: Discussion) {
    // ajoute localement si tu veux aussi garder une copie
    this.discussions.unshift(disc);
    this.newDiscussionSource.next(disc);
  }
}


---

‚úÖ 2. chat-conversation-list.component.ts

Ton composant qui affiche la sidebar (liste des discussions).

import { Component, OnInit } from '@angular/core';
import { DiscussionService, Discussion } from '../services/discussion.service';

@Component({
  selector: 'app-chat-conversation-list',
  templateUrl: './chat-conversation-list.component.html',
  styleUrls: ['./chat-conversation-list.component.scss']
})
export class ChatConversationListComponent implements OnInit {
  activeDiscussions: Discussion[] = [];

  constructor(private discussionService: DiscussionService) {}

  ngOnInit(): void {
    // Initialisation
    const stored = this.discussionService.getDiscussions();
    this.activeDiscussions = stored;

    // Abonnement pour les nouvelles discussions
    this.discussionService.newDiscussion$.subscribe((newDisc: Discussion) => {
      newDisc.isExpired = false; // fra√Æchement cr√©√©e
      this.activeDiscussions.unshift(newDisc);
    });
  }

  changeDiscussion(id: number, index: number) {
    const discussion = this.activeDiscussions[index];
    if (discussion.isExpired) return; // protection en double

    // Redirige ou change la vue ici
    console.log('Switching to discussion:', id);
  }
}


---

‚úÖ 3. chat-conversation-list.component.html

Ton template Angular, avec la gestion des discussions expir√©es.

<div class="discussion-list">
  <div
    *ngFor="let discussion of activeDiscussions; let i = index"
    class="discussion-item"
    [class.expired]="discussion.isExpired"
    (click)="changeDiscussion(discussion.id, i)"
  >
    {{ discussion.name }}
    <span *ngIf="discussion.isExpired">(expir√©e)</span>
  </div>
</div>


---

‚úÖ 4. chat-conversation-list.component.scss

Ajoute une classe pour styliser les discussions inactives.

.discussion-list {
  .discussion-item {
    padding: 10px;
    cursor: pointer;
    transition: 0.2s;

    &.expired {
      opacity: 0.5;
      pointer-events: none; // D√©sactive le clic
      font-style: italic;
    }

    &:hover {
      background-color: #f2f2f2;
    }
  }
}


---

‚úÖ 5. Exemple d'utilisation dans un autre composant (cr√©ation discussion)

createDiscussion() {
  const newDiscussion = {
    id: Date.now(),
    name: 'Nouvelle discussion',
    startDate: new Date().toISOString(),
  };

  // Envoie dans le service
  this.discussionService.emitNewDiscussion(newDiscussion);
}


---

üß™ R√©sultat attendu

‚úÖ Une discussion nouvellement cr√©√©e appara√Æt imm√©diatement en haut.

‚ùå Si la discussion a plus d‚Äô1h, elle est gris√©e et impossible √† ouvrir.

‚öôÔ∏è Plus besoin de window.location.reload().



---

Souhaitez-tu que je regroupe tout √ßa dans un .zip ou projet Angular de d√©mo que tu peux tester localement ?

