Here's the complete solution integrated with your existing `config_depends.py`:

### 1. Updated `config_depends.py` with Vault Dependency

```python
from src.main.infrastructure.services.secrets.vault_service import HashicorpVaultService
from src.main.web_api.config.get_config import Configuration
from fastapi import Depends

class ConfigDependency:
    @staticmethod
    def get_config() -> Configuration:
        vault_service = HashicorpVaultService(
            Configuration.get_config_var(),
            Configuration.get_cert_file(),
        )
        config = Configuration(vault_service)
        return config

    @staticmethod
    def get_vault_service() -> HashicorpVaultService:
        """Dependency for Vault service"""
        return HashicorpVaultService(
            Configuration.get_config_var(),
            Configuration.get_cert_file(),
        )
```

### 2. Optimized `vault_service.py`

```python
import os
from dotenv import load_dotenv
from hvac import Client
from hvac.api.auth_methods import Kubernetes
from typing import Optional
from src.main.infrastructure.services.secrets.interface_secret_services import ISecretService

class HashicorpVaultService(ISecretService):
    def __init__(self, config: dict, cert: str):
        self.config = config
        self.cert = cert
        self._client = None
        self.DOMAIN = "discovery"  # Hardcoded constant domain

    @property
    def client(self) -> Client:
        if not self._client:
            self._client = Client(
                url=self.config["K8s_Vault"]["hvault_url"],
                namespace=f"BNPPAN/AMBE/{self.config['K8s_Vault']['ecosystem']}",
                verify=self.cert
            )
            self._authenticate()
        return self._client

    def get_poc_token(self, poc_name: str) -> Optional[str]:
        """
        Retrieve token for a specific POC from Vault
        Path structure: secret/discovery/poc_name
        """
        try:
            secret_path = f"{self.DOMAIN}/{poc_name}"
            response = self.client.secrets.kv.read_secret_version(
                path=secret_path,
                mount_point="secret",
                raise_on_deleted_version=True
            )
            return response["data"]["data"]["token"]
        except Exception as e:
            print(f"Error retrieving token for {poc_name}: {str(e)}")
            return None

    def _authenticate(self):
        """Authenticate using Kubernetes method"""
        jwt_token = self._read_kubernetes_token(
            self.config["K8s_Vault"]["token"],
            self.config["env"]
        )
        Kubernetes(self._client.adapter).login(
            role=self.config["K8s_Vault"]["k8s_role"],
            jwt=jwt_token,
            use_token=True,
            mount_point=f"kubernetes_{self.config['K8s_Vault']['namespace']}"
        )

    def _read_kubernetes_token(self, kubernetes_token_path: str, env: str) -> str:
        """Read Kubernetes JWT token from file or environment"""
        try:
            if env != "LOCAL":
                with open(kubernetes_token_path) as f:
                    return f.read()
            else:
                load_dotenv()
                return os.getenv("TOKEN_K8S")
        except Exception as e:
            print(f"Error reading Kubernetes token: {str(e)}")
            raise
```

### 3. Updated `vault_controllers.py`

```python
from fastapi import APIRouter, Depends, HTTPException, Path
from src.main.web_api.dependencies.config_depends import ConfigDependency
from src.main.infrastructure.services.secrets.vault_service import HashicorpVaultService

router = APIRouter(prefix="/vault", tags=["Vault Secrets"])

@router.get("/tokens/{poc_name}")
async def get_poc_token(
    poc_name: str = Path(..., description="POC name", example="poc1"),
    vault_service: HashicorpVaultService = Depends(ConfigDependency.get_vault_service)
):
    """
    Retrieve token for a specific POC from Vault
    - Path structure: secret/discovery/poc_name
    - Returns the token if found
    """
    token = vault_service.get_poc_token(poc_name)
    if not token:
        raise HTTPException(
            status_code=404,
            detail=f"Token not found for POC '{poc_name}'"
        )
    return {
        "poc": poc_name,
        "token": token,
        "vault_path": f"secret/discovery/{poc_name}"  # For transparency
    }
```

### 4. Updated `main.py` (router registration)

```python
# Add to your existing imports
from src.main.web_api.controllers.vault_controllers import router as vault_router

# Add with other router includes
app.include_router(
    vault_router,
    prefix=f"/{version}",
    tags=["Vault Secrets"]
)
```

### Key Improvements:

1. **Dependency Integration**:
   - Uses your existing `ConfigDependency` pattern
   - Adds `get_vault_service()` method alongside existing config dependency

2. **Consistent Initialization**:
   - Both config and vault service use the same initialization pattern
   ```python
   Configuration.get_config_var(),
   Configuration.get_cert_file()
   ```

3. **Enhanced Response**:
   - Includes `vault_path` in response for debugging
   - Clear error messages

4. **Security**:
   - Maintains existing Kubernetes authentication
   - Proper error handling at all levels

### Usage Example:

**Request:**
```
GET /api/v0.0.1/vault/tokens/poc1
```

**Response:**
```json
{
    "poc": "poc1",
    "token": "s.8d7f9e0a1b2c3d4e5f6g7h8i9j0",
    "vault_path": "secret/discovery/poc1"
}
```

**Error Response:**
```json
{
    "detail": "Token not found for POC 'invalid_poc'"
}
```

### Testing Recommendations:

1. **Unit Tests**:
   ```python
   @patch('hvac.Client.secrets.kv.read_secret_version')
   def test_get_poc_token_success(mock_read):
       mock_read.return_value = {'data': {'data': {'token': 'test-token'}}}
       service = HashicorpVaultService(mock_config, mock_cert)
       assert service.get_poc_token("poc1") == "test-token"
   ```

2. **Integration Tests**:
   ```python
   def test_vault_endpoint(client):
       response = client.get("/api/v0.0.1/vault/tokens/poc1")
       assert response.status_code == 200
       assert "token" in response.json()
   ```

This solution perfectly integrates with your existing architecture while providing a clean, maintainable way to retrieve POC tokens from Vault.
