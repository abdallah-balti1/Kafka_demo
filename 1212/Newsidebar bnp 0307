import { useState, useEffect } from "react";
import { PiChartLineBold, PiUsers, PiBuilding, PiInfo, PiChevronLeft, PiChevronRight } from "react-icons/pi";

// Mock function to simulate token decoding
const decodeToken = (token) => {
  // This would normally decode a JWT token
  return { role: "admin" };
};

export default function Sidebar() {
  const [isExpanded, setIsExpanded] = useState(false);
  const [role, setRole] = useState(undefined);
  const [activeItem, setActiveItem] = useState("/home");

  useEffect(() => {
    const token = "mock_access_token"; // This would come from localStorage in a real app
    if (token) {
      const dataUser = decodeToken(token);
      setRole(dataUser?.role);
    } else {
      setRole("guest");
    }
  }, []);

  const menuItems = [
    { 
      name: "Dashboard", 
      icon: PiChartLineBold, 
      link: "/home",
      color: "text-bnp-green",
      bgColor: "bg-bnp-green/10"
    },
    ...(role === "admin" ? [
      { 
        name: "Users", 
        icon: PiUsers, 
        link: "/users",
        color: "text-bnp-blue",
        bgColor: "bg-bnp-blue/10"
      },
      { 
        name: "Organizations", 
        icon: PiBuilding, 
        link: "/orgs",
        color: "text-bnp-purple",
        bgColor: "bg-bnp-purple/10"
      },
    ] : []),
    { 
      name: "About", 
      icon: PiInfo, 
      link: "/about",
      color: "text-bnp-orange",
      bgColor: "bg-bnp-orange/10"
    },
  ];

  const isActive = (link) => activeItem === link;

  if (role === undefined) {
    return (
      <div className="fixed left-0 top-0 h-full w-16 bg-gradient-to-b from-bnp-dark to-bnp-darker animate-pulse">
        <div className="flex items-center justify-center h-16 border-b border-bnp-green/20">
          <div className="w-8 h-8 bg-bnp-green/30 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div 
      className={`fixed left-0 top-0 h-full bg-gradient-to-b from-bnp-dark to-bnp-darker text-white shadow-2xl transition-all duration-300 ease-in-out z-50 ${
        isExpanded ? "w-64" : "w-16"
      }`}
      onMouseEnter={() => setIsExpanded(true)}
      onMouseLeave={() => setIsExpanded(false)}
    >
      {/* Header */}
      <div className="p-4 border-b border-bnp-green/20 flex items-center justify-between h-16">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-bnp-green to-bnp-blue flex items-center justify-center">
            <span className="font-bold text-white text-sm">BNP</span>
          </div>
          <span 
            className={`font-bold text-lg whitespace-nowrap transition-all duration-300 ${
              isExpanded ? "opacity-100 translate-x-0" : "opacity-0 -translate-x-4"
            }`}
          >
            BNP Paribas
          </span>
        </div>
        
        <button 
          className={`p-1 rounded-full bg-bnp-green/10 hover:bg-bnp-green/20 transition-all duration-200 ${
            isExpanded ? "opacity-100" : "opacity-0"
          }`}
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <PiChevronLeft className="w-4 h-4 text-bnp-green" />
          ) : (
            <PiChevronRight className="w-4 h-4 text-bnp-green" />
          )}
        </button>
      </div>

      {/* User Role Badge */}
      <div className="px-4 py-3">
        <div 
          className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium transition-all duration-300 ${
            role === "admin" 
              ? "bg-bnp-green/20 text-bnp-green border border-bnp-green/30" 
              : "bg-bnp-blue/20 text-bnp-blue border border-bnp-blue/30"
          } ${isExpanded ? "opacity-100" : "opacity-0"}`}
        >
          {role === "admin" ? "Administrator" : "Guest User"}
        </div>
      </div>

      {/* Navigation */}
      <nav className="mt-4 px-2">
        <ul className="space-y-2">
          {menuItems.map((item, index) => {
            const Icon = item.icon;
            const active = isActive(item.link);
            
            return (
              <li key={index}>
                <a
                  href={item.link}
                  onClick={(e) => {
                    e.preventDefault();
                    setActiveItem(item.link);
                  }}
                  className={`group flex items-center p-3 rounded-xl transition-all duration-200 relative overflow-hidden cursor-pointer ${
                    active
                      ? `${item.bgColor} ${item.color} shadow-lg border-l-4 border-current`
                      : "hover:bg-white/5 text-gray-300 hover:text-white"
                  }`}
                >
                  {/* Icon */}
                  <div className="relative z-10">
                    <Icon 
                      className={`w-6 h-6 transition-all duration-200 ${
                        active ? "scale-110" : "group-hover:scale-110"
                      }`}
                    />
                  </div>
                  
                  {/* Text */}
                  <span 
                    className={`ml-4 font-medium whitespace-nowrap transition-all duration-300 relative z-10 ${
                      isExpanded ? "opacity-100 translate-x-0" : "opacity-0 -translate-x-4"
                    }`}
                  >
                    {item.name}
                  </span>
                  
                  {/* Active indicator */}
                  {active && (
                    <div className="absolute right-2 w-2 h-2 rounded-full bg-current animate-pulse"></div>
                  )}
                  
                  {/* Hover effect */}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700"></div>
                </a>
              </li>
            );
          })}
        </ul>
      </nav>

      {/* Footer */}
      <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-bnp-green/20">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 rounded-full bg-gradient-to-br from-bnp-green to-bnp-blue flex items-center justify-center">
            <span className="text-xs font-bold">AI</span>
          </div>
          <div 
            className={`transition-all duration-300 ${
              isExpanded ? "opacity-100 translate-x-0" : "opacity-0 -translate-x-4"
            }`}
          >
            <p className="text-xs text-gray-400">Powered by AI</p>
            <p className="text-xs text-bnp-green">v2.0.1</p>
          </div>
        </div>
      </div>

      {/* Custom Styles */}
      <style jsx>{`
        .text-bnp-green { color: #00A651; }
        .text-bnp-blue { color: #0066CC; }
        .text-bnp-purple { color: #6B46C1; }
        .text-bnp-orange { color: #FF6B35; }
        .bg-bnp-green { background-color: #00A651; }
        .bg-bnp-blue { background-color: #0066CC; }
        .bg-bnp-purple { background-color: #6B46C1; }
        .bg-bnp-orange { background-color: #FF6B35; }
        .bg-bnp-green\\/10 { background-color: rgba(0, 166, 81, 0.1); }
        .bg-bnp-blue\\/10 { background-color: rgba(0, 102, 204, 0.1); }
        .bg-bnp-purple\\/10 { background-color: rgba(107, 70, 193, 0.1); }
        .bg-bnp-orange\\/10 { background-color: rgba(255, 107, 53, 0.1); }
        .bg-bnp-green\\/20 { background-color: rgba(0, 166, 81, 0.2); }
        .bg-bnp-blue\\/20 { background-color: rgba(0, 102, 204, 0.2); }
        .bg-bnp-dark { background-color: #1A1A1A; }
        .bg-bnp-darker { background-color: #0F0F0F; }
        .border-bnp-green\\/20 { border-color: rgba(0, 166, 81, 0.2); }
        .border-bnp-green\\/30 { border-color: rgba(0, 166, 81, 0.3); }
        .border-bnp-blue\\/30 { border-color: rgba(0, 102, 204, 0.3); }
      `}</style>
    </div>
  );
}
