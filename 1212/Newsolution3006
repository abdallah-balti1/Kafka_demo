import { Link } from 'react-router-dom';

const Footer = () => {
    return (
        <footer className="bg-white border-t py-4 px-6 w-full">
            <div className="container mx-auto flex flex-col md:flex-row justify-between items-center">
                {/* Left side - Logo and Company Name */}
                <div className="flex items-center mb-4 md:mb-0">
                    <img 
                        src="/bnp-logo.svg" 
                        alt="Company Logo" 
                        className="h-8 mr-3" 
                    />
                    <span className="text-lg font-semibold">The asset manager for a changing world</span>
                </div>
                {/* Right side - Links */}
                <div className="flex space-x-6 text-sm text-gray-600">
                    <Link to="/about" className="hover:text-emerald-600 transition-colors">
                        About us
                    </Link>
                    <span>|</span>
                    <Link to="/contact" className="hover:text-emerald-600 transition-colors">
                        Contact us
                    </Link>
                    <span>|</span>
                    <Link to="/legal" className="hover:text-emerald-600 transition-colors">
                        Legal information
                    </Link>
                </div>
            </div>
        </footer>
    );
};

export default Footer;



import React, { useState, useEffect } from 'react';
import { getPocs } from 'services/pocs';
import { Pocs } from "schemas/pocs";
import { decodeToken } from 'utils/auth';
import Alert from '@mui/material/Alert';
import CircularProgress from '@mui/material/CircularProgress';
import LockIcon from '@mui/icons-material/Lock';
import EventBusyIcon from '@mui/icons-material/EventBusy';
import AdminPanelSettingsIcon from '@mui/icons-material/AdminPanelSettings';

const HomePage = () => {
    const [pocs, setPocs] = useState<Pocs[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [userRole, setUserRole] = useState<string>('guest');

    useEffect(() => {
        const token = localStorage.getItem("access_token");
        if (token) {
            try {
                const decoded = decodeToken(token);
                setUserRole(decoded.role || 'guest');
            } catch (err) {
                console.error("Token decoding failed:", err);
            }
        }

        const fetchData = async () => {
            try {
                const response = await getPocs();
                setPocs(response);
            } catch (err) {
                setError(err.message || "Failed to load data");
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    const handlePocClick = (poc: Pocs) => {
        if (userRole === 'admin' || poc.access_status === 'is_active') {
            if (poc.url) {
                window.open(poc.url, '_blank');
            } else {
                alert('No URL provided for this POC.');
            }
        } else if (poc.access_status === 'is_expired') {
            alert('Access to this POC has expired.');
        } else {
            alert('You are not authorized to access this POC.');
        }
    }

    if (loading) {
        return (
            <div className="h-full flex items-center justify-center">
                <div className="text-center">
                    <CircularProgress />
                    <p className="mt-4 text-gray-600">Loading POCs...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="h-full flex items-center justify-center">
                <Alert severity="error" className="max-w-md">
                    {error}
                </Alert>
            </div>
        );
    }

    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'admin_access':
                return (
                    <span className="text-green-600 flex items-center">
                        <AdminPanelSettingsIcon className="mr-1" style={{ fontSize: 16 }} /> Admin Access
                    </span>
                );
            case 'is_active':
                return null;
            case 'is_expired':
                return (
                    <span className="text-orange-500 flex items-center">
                        <EventBusyIcon className="mr-1" style={{ fontSize: 16 }} /> Access Expired
                    </span>
                );
            case 'no_access':
            default:
                return (
                    <span className="text-red-500 flex items-center">
                        <LockIcon className="mr-1" style={{ fontSize: 16 }} /> Not Authorized
                    </span>
                );
        }
    }

    return (
        <div className="flex flex-col">
            <div className="text-center mb-8">
                <div className="flex justify-center mb-6">
                    <img 
                        src="/AID_logo.png" 
                        alt="Company Logo" 
                        className="h-20 w-auto object-contain transition-transform hover:scale-105" 
                    />
                </div>
                <h1 className="text-3xl font-bold text-gray-800 mb-2">
                    Welcome{userRole === 'admin' ? ' Admin' : ''} to the Dashboard
                </h1>
                <p className="text-gray-600">
                    {userRole === 'admin' 
                        ? 'You have access to all POCs' 
                        : 'View your assigned POCs below'}
                </p>
            </div>

            <div className="flex flex-wrap justify-center gap-8">
                {pocs.map((poc) => {
                    const isClickable = userRole === 'admin' || poc.access_status === 'is_active';
                    return (
                        <div
                            key={poc.id}
                            onClick={() => isClickable && handlePocClick(poc)}
                            className={`bg-white shadow-lg rounded-xl p-6 border transition-all w-64 flex flex-col items-center 
                                ${isClickable 
                                    ? 'cursor-pointer hover:shadow-xl hover:scale-105 border-gray-200' 
                                    : 'cursor-not-allowed border-gray-100 opacity-70 grayscale'}`}
                        >
                            <div className="w-20 h-20 bg-gray-100 rounded-full mb-4 flex items-center justify-center">
                                <img
                                    src={poc.name === "My Referencial Assistant" ? "/mra.png" : "/vite.svg"}
                                    alt={poc.name}
                                    className="w-16 h-16 object-contain"
                                />
                            </div>
                            <p className={`text-center font-semibold ${
                                isClickable ? 'text-blue-600' : 'text-gray-400'
                            }`}>
                                {poc.name}
                            </p>
                            <div className="mt-2 flex items-center text-xs">
                                {getStatusIcon(poc.access_status)}
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

export default HomePage;



import React from "react";
import Header from "./Header";
import Sidebar from "./Sidebar";
import Footer from "./Footer";

interface LayoutProps {
    children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
    return (
        <div className="min-h-screen flex flex-col">
            {/* Sidebar - Content Row */}
            <div className="flex flex-1">
                <Sidebar />
                {/* Main Column */}
                <div className="flex flex-col flex-1 ml-16"> {/* ml-16 = Sidebar width */}
                    <Header />
                    <main className="flex-1 p-4 overflow-auto">
                        {children}
                    </main>
                </div>
            </div>
            {/* Footer */}
            <Footer />
        </div>
    );
};

export default Layout;
