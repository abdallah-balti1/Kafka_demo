@app.get("/pocs/{poc_name}")
async def access_poc(
    poc_name: str,
    user: User = Depends(AuthDependency.require_poc_access(poc_name))
):
    # Access granted, proceed with the request
    ...


from datetime import datetime
from uuid import UUID
from typing import List, Optional

from fastapi import Depends, HTTPException

from src.main.web_api.dependencies.auth_depends import AuthDependency
from src.main.services.interfaces.management_users_pocs_service import IManagementUsersPocsService
from src.main.services.interfaces.user_service import IUserService
from src.main.services.interfaces.poc_service import IPocService
from src.main.repositories.interfaces.management_users_pocs_repository import IManagementUsersPocsRepository
from src.main.core.exceptions.poc_exceptions import PocNotFoundException
from src.main.core.mappers.user_poc_relation_mapper import UserPocRelationMapper
from src.main.core.models.dto.user_poc_relation_dto import UserPocRelationDto

class ManagementUsersPocsService(IManagementUsersPocsService):
    def __init__(
        self,
        repository: IManagementUsersPocsRepository,
        user_service: IUserService,
        poc_service: IPocService,
    ):
        self.repository = repository
        self.mapper_pocs_users = UserPocRelationMapper()
        self.user_service = user_service
        self.poc_service = poc_service

    def can_user_access_to_poc(self, user_id: str, poc_name: str) -> Optional[str]:
        """
        Check if user has access to a specific POC
        Returns POC URL if access is granted, None otherwise
        """
        poc = self.poc_service.get_poc_by_name(poc_name)
        if not poc:
            raise PocNotFoundException(poc_name)
            
        user_poc_relation = self.repository.get_user_poc_relation(user_id, poc.id)
        
        if user_poc_relation:
            current_date = datetime.now().date()
            if (user_poc_relation.start_using <= current_date <= user_poc_relation.end_using):
                return user_poc_relation.poc.url
        return None

    def get_all_users_for_a_poc(self, poc_id: UUID) -> List[UserPocRelationDto]:
        """Get all users with access to a specific POC"""
        users_pocs_relation = self.repository.get_users_for_poc(poc_id)
        return self.mapper_pocs_users.to_dtos(users_pocs_relation)

    def get_all_pocs_for_a_user(self, user_id: str) -> List[UserPocRelationDto]:
        """Get all POCs accessible by a specific user"""
        current_user = AuthDependency.get_current_user()
        
        # Only allow if current user is admin or requesting their own POCs
        if current_user.id != user_id and not current_user.is_admin:
            raise HTTPException(
                status_code=403,
                detail="Not authorized to view other users' POCs"
            )
            
        user_poc_relations = self.repository.get_pocs_for_user(user_id)
        return self.mapper_pocs_users.to_dtos(user_poc_relations)

    def add_user_to_a_poc(self, relation: UserPocRelationDto) -> UserPocRelationDto:
        """Add a user to a POC with access permissions"""
        # Verify the requesting user has admin privileges
        AuthDependency.require_admin()
        
        # Validate the user exists
        if not self.user_service.get_user_by_id(relation.user_id):
            raise HTTPException(
                status_code=400,
                detail=f"User with ID {relation.user_id} not found"
            )
        
        # Validate the POC exists
        if not self.poc_service.get_poc_by_id(relation.poc_id):
            raise HTTPException(
                status_code=400,
                detail=f"POC with ID {relation.poc_id} not found"
            )
        
        # Check for existing relation
        existing_relation = self.repository.get_user_poc_relation(
            relation.user_id, 
            relation.poc_id
        )
        
        if existing_relation:
            raise HTTPException(
                status_code=400,
                detail="User already has access to this POC"
            )
        
        # Create new relation
        new_relation = self.repository.add_user_poc_relation(relation)
        return self.mapper_pocs_users.to_dto(new_relation)

    def remove_user_from_poc(self, user_id: str, poc_id: UUID) -> bool:
        """Remove a user's access to a POC"""
        # Verify the requesting user has admin privileges
        AuthDependency.require_admin()
        
        return self.repository.remove_user_poc_relation(user_id, poc_id)



from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from typing import Optional

from src.main.core.config import Configuration
from src.main.core.dependencies.db_depends import DbDependency
from src.main.core.dependencies.config_depends import ConfigDependency
from src.main.services.interfaces.security_service import ISecurityService
from src.main.services.interfaces.user_service import IUserService
from src.main.services.interfaces.tasse_service import ITasseService
from src.main.services.interfaces.auth_service import TAuthentificationService
from src.main.services.concrete.auth_service import AuthentificationService
from src.main.services.concrete.security_service import SecurityService
from src.main.services.concrete.tasse_service import TaaseService
from src.main.services.concrete.user_service import UserDependency

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

class AuthDependency:
    @staticmethod
    def get_auth_service(
        db: Session = Depends(DbDependency.get_db_session),
        config: Configuration = Depends(ConfigDependency.get_config),
    ) -> TAuthentificationService:
        """Dependency for getting the authentication service"""
        user_service: IUserService = UserDependency.get_user_service(db)
        security_service: ISecurityService = SecurityService(config.get_jwt_key())
        tasse_service: ITasseService = TaaseService(
            config.get_tasse_config(), config.get_cert_file()
        )

        return AuthentificationService(
            user_service=user_service,
            security_service=security_service,
            tasse_service=tasse_service,
        )

    @staticmethod
    def get_current_user(
        token: str = Depends(oauth2_scheme),
        auth_service: TAuthentificationService = Depends(get_auth_service),
    ):
        """Dependency to get current authenticated user"""
        user = auth_service.verify_token(token)

        if user is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )
        return user

    @staticmethod
    def require_admin(user = Depends(get_current_user)):
        """Dependency to verify admin role"""
        if not user.is_admin:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Admin privileges required",
            )
        return user

    @staticmethod
    def require_poc_access(
        poc_name: str,
        user = Depends(get_current_user),
        management_service = Depends(lambda: ManagementUsersPocsService),
    ):
        """Dependency to verify POC access"""
        if not management_service.can_user_access_to_poc(user.id, poc_name):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access to this POC is not authorized",
            )
        return user
