from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session
from src.main.application.services.authentification.authentification_service import AuthentificationService
from src.main.application.services.authentification.interface_authentification_service import IAuthentificationService
from src.main.application.services.security.interface_security_service import ISecurityService
from src.main.application.services.security.security_service import SecurityService
from src.main.application.services.users.interface_user_service import IUserService
from src.main.infrastructure.services.taase.interface_taase_service import ITaaseService
from src.main.infrastructure.services.taase.taase_service import TaaseService
from src.main.web_api.config import Configuration
from src.main.web_api.dependencies.config_depends import ConfigDependency
from src.main.web_api.dependencies.db_depends import DbDependency
from src.main.web_api.dependencies.user_depends import UserDependency
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/token")


class AuthDependency:

    @staticmethod
    def get_auth_service(
        db: Session = Depends(DbDependency.get_db_session),
        config: Configuration = Depends(ConfigDependency.get_config)
    ) -> IAuthentificationService:
        user_service: IUserService = UserDependency.get_user_service(db)
        security_service: ISecurityService = SecurityService(config.get_jwt_key())
        taase_service: ITaaseService = TaaseService(config.get_taase_config(), config.get_cert_file())

        return AuthentificationService(
            user_service=user_service,
            security_service=security_service,
            taase_service=taase_service
        )

    @staticmethod
    def get_current_user(
        token: str = Depends(oauth2_scheme),
        auth_service: IAuthentificationService = Depends(get_auth_service)
    ):
        user = auth_service.verify_token(token)
        if user is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")
        return user

    @staticmethod
    def require_admin(user=Depends(get_current_user)):
        if user.role != "admin":
            raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Admin access required")
        return user
