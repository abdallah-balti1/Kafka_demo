def update_user_poc_relation(self, relation: UserPocRelationDto) -> UserPocRelationDto:
    # Ensure user exists
    user = self.user_service.get_user_by_id(relation.user.userId)
    if not user:
        raise UserNotFoundException(relation.user.userId)

    # Ensure new POC exists
    poc = self.poc_service.get_poc_by_id(relation.poc.id)
    if not poc:
        raise PocNotFoundException(relation.poc.name)

    # Validate dates
    if relation.endUsing < relation.startUsing:
        raise InvalidDatesException("End date must be after start date")

    # Check if the user already has any POC relation
    existing_relation = self.repository.get_user_poc_by_user_id(relation.user.userId)
    if not existing_relation:
        raise UserPocRelationNotFoundException(relation.user.userId, "Unknown")

    # Update the existing relation with the new POC info
    existing_relation.poc_id = relation.poc.id
    existing_relation.start_using = relation.startUsing
    existing_relation.end_using = relation.endUsing

    result = self.repository.update_object(existing_relation)
    return self.mapper_pocs_users.to_dto(result)

def get_user_poc_by_user_id(self, user_id: str) -> Optional[UserPocRelation]:
    return self.db.query(UserPocRelation).filter_by(user_id=user_id).first()

