Based on the folder structure shown in your screenshot and typical project conventions, your project seems to follow a Clean Architecture or Hexagonal Architecture pattern. Here's a breakdown of the structure and what each folder typically represents:


---

Root Folder: src/main/

This is your main application package. It contains clearly separated layers:


---

1. application/ — Application Layer

This layer contains use cases, DTOs, services, mappers, and exceptions.

dto/ — Data Transfer Objects: defines how data moves between layers (e.g. UserDto, PocDto).

services/ — Contains business logic (e.g. UserService).

mappers/ — Converts between domain models and DTOs.

exceptions/ — Custom exception classes for application-specific error handling.



---

2. domain/ — Domain Layer

This layer contains the core business entities and rules.

entities/ — Your domain models (e.g. User, Poc, UserPocRelation).

enums/ — Enumerations for fixed sets of values (e.g. roles, statuses).



---

3. infrastructure/

Usually, this would contain technical implementations like external services, but it seems empty or not detailed here.


---

4. persistance/ — Persistence Layer

This is responsible for data access and database-related configurations.

config/ — Configuration for DB connections (e.g., SQLAlchemy Base).

migrations/ — Database migrations (possibly Alembic).

repositories/ — Split into:

user/ — Repository implementations for user data.

poc/ — Same for POCs.

management_users_pocs/ — Handles UserPocRelation.

general_repository.py — Generic CRUD logic.

interface_general_repository.py — Abstract interface for the generic repository.




---

5. scripts/

This folder might contain utility scripts or CLI commands.


---

Summary of Architecture

This structure follows Clean Architecture principles:

Separation of Concerns: DTOs, domain entities, services, and infrastructure are all decoupled.

Dependency Rule: Inner layers (domain/application) don’t depend on outer layers (infrastructure).

Reusable Components: Your general_repository.py implements generic CRUD that can be reused.



---

Want a Diagram?

If you want, I can draw you a visual diagram of this architecture. Let me know!

