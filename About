import { SHA256, enc } from 'crypto-js';
import jwtDecode from 'jwt-decode';

interface CustomTokenPayload {
  userId: string;
  role: string;
  exp?: number;
  iat?: number;
}

// Génération du code verifier
export function generateCodeVerifier(): string {
  const array = new Uint8Array(32);
  window.crypto.getRandomValues(array);
  return Array.from(array).map(byte => byte.toString(16).padStart(2, '0')).join('');
}

// Génération du code challenge
export function generateCodeChallenge(codeVerifier: string): string {
  const hash = SHA256(codeVerifier);
  return enc.Base64url.stringify(hash);
}

export function decodeToken(token: string): CustomTokenPayload | null {
  try {
    const decode_tok = jwtDecode<CustomTokenPayload>(token);
    const current_time = Math.floor(Date.now() / 1000);
    if (decode_tok.exp && decode_tok.exp > current_time) {
      return decode_tok;
    } else {
      localStorage.removeItem('access_token');
      window.location.href = "/";
      return null;
    }
  } catch (e) {
    console.log('Invalid Token');
    localStorage.removeItem('access_token');
    window.location.href = "/";
    throw new Error('Unable to decode token');
  }
}
