from fastapi import APIRouter, Depends
from web_api.dependencies.auth_depends import require_admin
from application.services.users.user_service import UserService

router = APIRouter()
user_service = UserService()

@router.get("/users", dependencies=[Depends(require_admin)])
def get_all_users():
    return user_service.get_all_users()



from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from application.dto.user_dto import UserDto  # Adjust path
from core.config import settings  # Adjust path to access SECRET_KEY

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/token")

def get_current_user(token: str = Depends(oauth2_scheme)) -> UserDto:
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
        user_id = payload.get("userId")
        role = payload.get("role")
        if user_id is None or role is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")
        return UserDto(userId=user_id, role=role)
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials")


def require_admin(user: UserDto = Depends(get_current_user)):
    if user.role != "admin":
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Admin access required")
    return user
