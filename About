# dto/user_poc_update_dto.py
from pydantic import BaseModel
from datetime import date

class UserPocUpdateDto(BaseModel):
    userId: str
    pocId: str
    startUsing: date
    endUsing: date


from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from src.main.persistance.config.database_connection import get_db
from src.main.domain.entities.management_user_poc import UserPocRelation
from src.main.domain.entities.user import User
from src.main.domain.entities.poc import Poc
from src.main.web_api.dto.user_poc_update_dto import UserPocUpdateDto

router = APIRouter()

@router.put("/manage/user/poc")
def update_user_poc_relation(data: UserPocUpdateDto, db: Session = Depends(get_db)):
    # Check if user and poc exist
    user = db.query(User).filter_by(id=data.userId).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    poc = db.query(Poc).filter_by(id=data.pocId).first()
    if not poc:
        raise HTTPException(status_code=404, detail="POC not found")

    # Check for existing relation
    relation = db.query(UserPocRelation).filter_by(user_id=data.userId).first()

    if relation:
        # Update existing
        relation.poc_id = data.pocId
        relation.start_using = data.startUsing
        relation.end_using = data.endUsing
    else:
        # Create new relation
        relation = UserPocRelation(
            user_id=data.userId,
            poc_id=data.pocId,
            start_using=data.startUsing,
            end_using=data.endUsing
        )
        db.add(relation)

    db.commit()
    return {"message": "User-POC relation updated"}






