import { AxiosResponse } from "axios";
import { User } from "schemas/user";
import axiosInstance from "utils/customizedAxios";

const usersUrl = "/users";

// Cache variables
let usersCache: User[] = [];
let lastFetchTime = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

export const getUsersWithPocs = async (forceRefresh = false): Promise<User[]> => {
  const shouldRefresh = forceRefresh || 
                       Date.now() - lastFetchTime > CACHE_DURATION ||
                       usersCache.length === 0;

  if (shouldRefresh) {
    try {
      const response: AxiosResponse<User[]> = await axiosInstance.get(usersUrl);
      usersCache = response.data.map(user => ({
        ...user,
        pocs: user.pocs || [] // Ensure pocs is always an array
      }));
      lastFetchTime = Date.now();
    } catch (error) {
      console.error("Failed to fetch users:", error);
      throw error;
    }
  }
  return usersCache;
};

export const updateUser = async (userId: string, updateData: Partial<User>): Promise<User> => {
  const response = await axiosInstance.put(usersUrl, updateData, {
    params: { user_id: userId },
  });
  // Update cache
  usersCache = usersCache.map(user => 
    user.userId === userId ? { ...user, ...updateData } : user
  );
  return response.data;
};

export const deleteUser = async (userId: string): Promise<void> => {
  await axiosInstance.delete(usersUrl, {
    params: { user_id: userId },
  });
  // Update cache
  usersCache = usersCache.filter(user => user.userId !== userId);
};




import axiosInstance from "utils/customizedAxios";
import { User } from "schemas/User";
import { Poc } from "schemas/pocs";

export const assignUserToPoc = async (
  user: User,
  poc: Poc,
  startDate: string,
  endDate: string
): Promise<void> => {
  const payload = {
    user: {
      userId: user.userId,
      firstName: user.firstName,
      lastName: user.lastName,
      mail: user.mail,
      role: user.role,
      active: user.active
    },
    poc: {
      id: poc.id,
      name: poc.name,
      startDate: poc.startDate,
      endDate: poc.endDate,
      url: poc.url
    },
    startUsing: startDate,
    endUsing: endDate
  };

  await axiosInstance.put("/manage/user/poc", payload);
};

export const removeUserPoc = async (userId: string): Promise<void> => {
  await axiosInstance.delete(`/manage/user/poc/${userId}`);
};


import React, { useState, useEffect, useMemo } from "react";
import { getUsersWithPocs, updateUser } from "services/users";
import { assignUserToPoc, removeUserPoc } from "services/userPocService";
import { User } from "schemas/user";
import { Poc } from "schemas/pocs";

type Props = {
  user: User;
  onClose: () => void;
  onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
  const [formData, setFormData] = useState<User>({ ...user });
  const [allUsers, setAllUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [localPoc, setLocalPoc] = useState<Poc | null>(null);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  // Extract and cache POC data
  const { availablePocs, currentUserPoc } = useMemo(() => {
    const currentUser = allUsers.find(u => u.userId === user.userId);
    const allPocs = Array.from(new Set(
      allUsers.flatMap(u => u.pocs)
        .filter((poc): poc is Poc => poc !== undefined)
        .map(poc => poc.id)
    )).map(id => 
      allUsers.flatMap(u => u.pocs).find(poc => poc?.id === id)
    ).filter(Boolean) as Poc[];

    return {
      availablePocs: allPocs,
      currentUserPoc: currentUser?.pocs?.[0] || null
    };
  }, [allUsers, user.userId]);

  // Load data on mount
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true);
      try {
        const users = await getUsersWithPocs();
        setAllUsers(users);
        
        // Initialize form state
        if (currentUserPoc) {
          setLocalPoc(currentUserPoc);
          setStartDate(currentUserPoc.startDate || "");
          setEndDate(currentUserPoc.endDate || "");
        }
      } catch (err) {
        console.error("Failed to load data:", err);
        setError("Failed to load user data");
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, [user.userId]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handlePocChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const pocId = e.target.value;
    const poc = availablePocs.find(p => p.id === pocId) || null;
    setLocalPoc(poc);
    setStartDate(poc?.startDate || "");
    setEndDate(poc?.endDate || "");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(true);

    try {
      // Update user details
      await updateUser(formData.userId, formData);

      // Handle POC assignment
      if (!localPoc && currentUserPoc) {
        await removeUserPoc(formData.userId);
      } else if (localPoc) {
        await assignUserToPoc(
          formData,
          localPoc,
          startDate,
          endDate
        );
      }

      onSuccess();
      onClose();
    } catch (err) {
      console.error("Update failed:", err);
      setError(err instanceof Error ? err.message : "Failed to update user");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        <form onSubmit={handleSubmit} className="p-6">
          {/* Header */}
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Edit User</h2>
            <button
              type="button"
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading}
            >
              &times;
            </button>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
              {error}
            </div>
          )}

          {/* Form Fields */}
          <div className="space-y-4">
            {/* User ID */}
            <div>
              <label className="block text-sm font-medium mb-1">User ID</label>
              <input
                type="text"
                value={formData.userId}
                readOnly
                className="w-full p-2 border rounded bg-gray-100"
              />
            </div>

            {/* First Name */}
            <div>
              <label className="block text-sm font-medium mb-1">First Name</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            {/* Last Name */}
            <div>
              <label className="block text-sm font-medium mb-1">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            {/* Email */}
            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="mail"
                value={formData.mail}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            {/* POC Assignment */}
            <div>
              <label className="block text-sm font-medium mb-1">POC Assignment</label>
              <select
                value={localPoc?.id || ""}
                onChange={handlePocChange}
                className="w-full p-2 border rounded"
                disabled={isLoading}
              >
                <option value="">-- No POC Assigned --</option>
                {availablePocs.map(poc => (
                  <option key={poc.id} value={poc.id}>
                    {poc.name} (ID: {poc.id})
                  </option>
                ))}
              </select>
            </div>

            {/* Date Fields */}
            {localPoc && (
              <>
                <div>
                  <label className="block text-sm font-medium mb-1">Start Date</label>
                  <input
                    type="date"
                    value={startDate}
                    onChange={(e) => setStartDate(e.target.value)}
                    className="w-full p-2 border rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">End Date</label>
                  <input
                    type="date"
                    value={endDate}
                    onChange={(e) => setEndDate(e.target.value)}
                    min={startDate}
                    className="w-full p-2 border rounded"
                    required
                  />
                </div>
              </>
            )}
          </div>

          {/* Form Actions */}
          <div className="flex justify-between items-center mt-6 pt-4 border-t">
            {localPoc && (
              <button
                type="button"
                onClick={() => setLocalPoc(null)}
                disabled={isLoading}
                className="px-4 py-2 text-red-600 hover:text-red-800 disabled:opacity-50"
              >
                Remove POC
              </button>
            )}
            <div className="space-x-3">
              <button
                type="button"
                onClick={onClose}
                disabled={isLoading}
                className="px-4 py-2 border rounded hover:bg-gray-100 disabled:opacity-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isLoading}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              >
                {isLoading ? "Saving..." : "Save Changes"}
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserEditModal;
