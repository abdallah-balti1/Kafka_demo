import axiosInstance from "utils/customizedAxios";
import { User } from "schemas/User";
import { Poc } from "schemas/pocs";

export const assignUserToPoc = async (
  user: User,
  poc: Poc,
  startDate: string,
  endDate: string
): Promise<void> => {
  const payload = {
    user: {
      userId: user.userId,
      firstName: user.firstName,
      lastName: user.lastName,
      mail: user.mail,
      role: user.role,
      active: user.active,
      pocs: []
    },
    poc: {
      id: poc.id,
      name: poc.name,
      startDate: poc.startDate,
      endDate: poc.endDate,
      url: poc.url
    },
    startUsing: startDate,
    endUsing: endDate
  };

  await axiosInstance.put("/manage/user/poc", payload);
};

export const removeUserPoc = async (
  user: User,
  poc: Poc
): Promise<void> => {
  const payload = {
    user: {
      userId: user.userId,
      firstName: user.firstName,
      lastName: user.lastName,
      mail: user.mail,
      role: user.role,
      active: user.active,
      pocs: []
    },
    poc: {
      id: poc.id,
      name: poc.name,
      startDate: poc.startDate,
      endDate: poc.endDate,
      url: poc.url
    },
    startUsing: poc.startDate,
    endUsing: poc.endDate
  };

  await axiosInstance.delete("/manage/user/poc", { data: payload });
};







import React, { useState, useEffect, useMemo } from "react";
import { getUsersWithPocs, updateUser } from "services/users";
import { assignUserToPoc, removeUserPoc } from "services/userPocService";
import { fetchPocs } from "services/pocs";
import { User } from "schemas/user";
import { Poc } from "schemas/pocs";

type Props = {
  user: User;
  onClose: () => void;
  onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
  // State
  const [formData, setFormData] = useState<User>({ ...user });
  const [allPocs, setAllPocs] = useState<Poc[]>([]);
  const [selectedPocId, setSelectedPocId] = useState<string>("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [isLoading, setIsLoading] = useState({
    form: false,
    pocs: false
  });
  const [error, setError] = useState("");

  // Load all POCs and user's current assignment
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(prev => ({ ...prev, pocs: true }));
      try {
        // Load ALL POCs from the dedicated endpoint
        const pocs = await fetchPocs();
        setAllPocs(pocs);

        // Check current assignment from users data
        const users = await getUsersWithPocs();
        const currentUser = users.find(u => u.userId === user.userId);
        if (currentUser?.pocs?.[0]) {
          setSelectedPocId(currentUser.pocs[0].id);
          setStartDate(currentUser.pocs[0].startDate || "");
          setEndDate(currentUser.pocs[0].endDate || "");
        }
      } catch (err) {
        console.error("Failed to load data:", err);
        setError("Failed to load POC data");
      } finally {
        setIsLoading(prev => ({ ...prev, pocs: false }));
      }
    };

    loadData();
  }, [user.userId]);

  // Get current POC object from selected ID
  const selectedPoc = useMemo(() => (
    allPocs.find(poc => poc.id === selectedPocId) || null
  ), [allPocs, selectedPocId]);

  // Handle form changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handlePocChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newPocId = e.target.value;
    setSelectedPocId(newPocId);
    
    const newPoc = allPocs.find(poc => poc.id === newPocId);
    if (newPoc) {
      setStartDate(newPoc.startDate || "");
      setEndDate(newPoc.endDate || "");
    } else {
      setStartDate("");
      setEndDate("");
    }
  };

  // Form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading(prev => ({ ...prev, form: true }));

    try {
      // Update user details
      await updateUser(formData.userId, formData);

      // Get current assignment before making changes
      const users = await getUsersWithPocs();
      const currentUser = users.find(u => u.userId === user.userId);
      const currentPoc = currentUser?.pocs?.[0];

      // Handle POC changes
      if (selectedPocId && selectedPoc) {
        // Assign new or update existing POC
        await assignUserToPoc(
          formData,
          selectedPoc,
          startDate,
          endDate
        );
      } else if (currentPoc) {
        // Remove existing POC if none selected
        await removeUserPoc(formData, currentPoc);
      }

      onSuccess();
      onClose();
    } catch (err) {
      console.error("Submission error:", err);
      setError(err instanceof Error ? err.message : "Failed to save changes");
    } finally {
      setIsLoading(prev => ({ ...prev, form: false }));
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Edit User</h2>
            <button
              type="button"
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700"
              disabled={isLoading.form}
            >
              &times;
            </button>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
              {error}
            </div>
          )}

          <div className="space-y-4">
            {/* User Fields */}
            <div>
              <label className="block text-sm font-medium mb-1">User ID</label>
              <input
                type="text"
                value={formData.userId}
                readOnly
                className="w-full p-2 border rounded bg-gray-100"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">First Name</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Email</label>
              <input
                type="email"
                name="mail"
                value={formData.mail}
                onChange={handleInputChange}
                className="w-full p-2 border rounded"
                required
              />
            </div>

            {/* POC Assignment - No remove button */}
            <div>
              <label className="block text-sm font-medium mb-1">POC Assignment</label>
              <select
                value={selectedPocId}
                onChange={handlePocChange}
                className="w-full p-2 border rounded"
                disabled={isLoading.pocs}
              >
                <option value="">-- No POC Assigned --</option>
                {allPocs.map(poc => (
                  <option key={poc.id} value={poc.id}>
                    {poc.name} ({poc.id})
                  </option>
                ))}
              </select>
            </div>

            {/* Date Fields */}
            {selectedPocId && (
              <>
                <div>
                  <label className="block text-sm font-medium mb-1">Start Date</label>
                  <input
                    type="date"
                    value={startDate}
                    onChange={(e) => setStartDate(e.target.value)}
                    className="w-full p-2 border rounded"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">End Date</label>
                  <input
                    type="date"
                    value={endDate}
                    onChange={(e) => setEndDate(e.target.value)}
                    min={startDate}
                    className="w-full p-2 border rounded"
                    required
                  />
                </div>
              </>
            )}
          </div>

          <div className="flex justify-end space-x-3 mt-6 pt-4 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border rounded hover:bg-gray-100"
              disabled={isLoading.form}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              disabled={isLoading.form}
            >
              {isLoading.form ? "Saving..." : "Save Changes"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserEditModal;
