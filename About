# Example endpoint
@app.get("/manage/pocs/user/{user_id}")
async def get_user_pocs(user_id: str, token: str = Depends(oauth2_scheme)):
    # Verify token and get current user
    current_user = await get_current_user(token)
    
    # Verify requested user_id matches token user_id or user is admin
    if current_user.id != user_id and not current_user.is_admin:
        raise HTTPException(status_code=403, detail="Not authorized")
    
    # Return user's authorized POCs
    pocs = await get_authorized_pocs_for_user(user_id)
    return pocs




import React, { useState, useEffect } from 'react';
import { getPocs, getUserAuthorizedPocs } from '../services/pocs';
import { useAuth } from '../context/AuthContext'; // Assuming you have an auth context

interface POCApp {
  id: string;
  name: string;
  url: string;
}

const HomePage = () => {
  const { user } = useAuth(); // Get user from your auth context
  const [pccApps, setPccApps] = useState<POCApp[]>([]);
  const [authorizedPocIds, setAuthorizedPocIds] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [allPocs, userPocs] = await Promise.all([
          getPocs(),
          getUserAuthorizedPocs(user.id)
        ]);
        
        setPccApps(allPocs);
        setAuthorizedPocIds(userPocs);
      } catch (err) {
        setError(err.response?.data?.message || err.message || "Failed to load data");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user.id]);

  const handlePocClick = async (pocId: string, url: string) => {
    if (authorizedPocIds.includes(pocId)) {
      window.open(url, '_blank');
    } else {
      alert('You are not authorized to access this POC');
      // Or use a more sophisticated notification system
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6 flex items-center justify-center">
        <div className="text-center">
          <div className="flex justify-center mb-4">
            <img 
              src="/logo.png" 
              alt="Company Logo" 
              className="h-16 w-auto object-contain"
            />
          </div>
          <p className="text-gray-600">Loading POCs...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6 flex items-center justify-center">
        <div className="text-center">
          <div className="flex justify-center mb-4">
            <img 
              src="/logo.png" 
              alt="Company Logo" 
              className="h-16 w-auto object-contain"
            />
          </div>
          <p className="text-red-500">Error: {error}</p>
          <button 
            onClick={() => window.location.reload()}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="text-center mb-8">
        <div className="flex justify-center mb-6">
          <img 
            src="/logo.png" 
            alt="Company Logo" 
            className="h-20 w-auto object-contain transition-all hover:scale-105"
          />
        </div>
        
        <h1 className="text-3xl font-bold text-gray-800 mb-2">Welcome to the Dashboard</h1>
        <p className="text-gray-600">Access your authorized POCs below</p>
      </div>

      <div className="flex flex-wrap justify-center gap-8">
        {pccApps.map((app) => {
          const isAuthorized = authorizedPocIds.includes(app.id);
          
          return (
            <div
              key={app.id}
              onClick={() => handlePocClick(app.id, app.url)}
              className={`bg-white shadow-lg rounded-xl p-6 border transition-all w-64 flex flex-col items-center cursor-pointer
                ${isAuthorized 
                  ? 'border-gray-200 hover:shadow-xl hover:scale-105' 
                  : 'border-gray-100 opacity-70'}
              `}
            >
              <img
                src="/logo.png"
                alt={app.name}
                className="w-20 h-20 object-contain mb-4"
              />
              <p className={`text-center font-semibold ${
                isAuthorized ? 'text-blue-600' : 'text-gray-400'
              }`}>
                {app.name}
              </p>
              {!isAuthorized && (
                <p className="text-xs text-gray-400 mt-1">Not authorized</p>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default HomePage;





import axios from 'axios';

interface POC {
  id: string;
  name: string;
  url: string;
}

export const getPocs = async (): Promise<POC[]> => {
  const response = await axios.get('/api/pocs');
  return response.data;
};

export const getUserAuthorizedPocs = async (userId: string): Promise<string[]> => {
  const response = await axios.get(`/manage/pocs/user/${userId}`);
  return response.data.map((poc: { id: string }) => poc.id);
};

export const checkPocAuthorization = async (userId: string, pocId: string): Promise<boolean> => {
  try {
    const response = await axios.get(`/manage/user/poc/${pocId}`);
    return response.data.some((user: { id: string }) => user.id === userId);
  } catch (error) {
    console.error('Authorization check failed:', error);
    return false;
  }
};
