import React, { useEffect, useState } from "react";
import { updateUser } from "services/users";
import { assignUserToPoc } from "services/userPocService";
import { fetchPocs } from "services/pocs";
import { User } from "schemas/user";
import { Poc } from "schemas/pocs";
import axios from "axios";

type Props = {
  user: User;
  onClose: () => void;
  onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
  const [formData, setFormData] = useState<User>({ ...user });
  const [pocs, setPocs] = useState<Poc[]>([]);
  const [selectedPoc, setSelectedPoc] = useState<Poc | null>(null);
  const [startUsing, setStartUsing] = useState("");
  const [endUsing, setEndUsing] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const loadData = async () => {
      try {
        setFormData({ ...user });

        const pocList = await fetchPocs();
        setPocs(pocList);

        const response = await axios.get(`/manage/pocs/user/${user.userId}`);
        const userPoc = response.data;

        if (userPoc?.poc?.id) {
          const matched = pocList.find(p => p.id === userPoc.poc.id);
          setSelectedPoc(matched || null);
          setStartUsing(userPoc.startUsing);
          setEndUsing(userPoc.endUsing);
        }
      } catch (error) {
        console.warn("No POC assigned or failed to load.");
      }
    };

    loadData();
  }, [user]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await updateUser(formData.userId, formData);

      if (selectedPoc && startUsing && endUsing) {
        await assignUserToPoc(formData, selectedPoc, startUsing, endUsing);
      }

      onSuccess();
      onClose();
    } catch (err) {
      console.error("Error updating user or assigning POC:", err);
      setError("Failed to update user or assign POC.");
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded shadow-lg w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Update User</h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          {error && <p className="text-red-600">{error}</p>}

          <input
            type="text"
            name="userId"
            value={formData.userId}
            readOnly
            className="w-full border p-2 rounded bg-gray-100 cursor-not-allowed"
          />

          <input
            type="text"
            name="firstName"
            placeholder="First Name"
            value={formData.firstName}
            onChange={handleChange}
            className="w-full border p-2 rounded"
            required
          />

          <input
            type="text"
            name="lastName"
            placeholder="Last Name"
            value={formData.lastName}
            onChange={handleChange}
            className="w-full border p-2 rounded"
            required
          />

          <input
            type="email"
            name="mail"
            placeholder="Email"
            value={formData.mail}
            onChange={handleChange}
            className="w-full border p-2 rounded"
            required
          />

          {/* POC Dropdown */}
          <div>
            <label className="block font-medium mb-1">Assign POC</label>
            <select
              value={selectedPoc?.id || ""}
              onChange={e => {
                const poc = pocs.find(p => p.id === e.target.value);
                setSelectedPoc(poc || null);
              }}
              className="w-full border p-2 rounded"
            >
              <option value="">-- Select POC --</option>
              {pocs.map(poc => (
                <option key={poc.id} value={poc.id}>
                  {poc.name}
                </option>
              ))}
            </select>
          </div>

          <input
            type="date"
            value={startUsing}
            onChange={e => setStartUsing(e.target.value)}
            className="w-full border p-2 rounded"
            required={!!selectedPoc}
          />

          <input
            type="date"
            value={endUsing}
            onChange={e => setEndUsing(e.target.value)}
            className="w-full border p-2 rounded"
            required={!!selectedPoc}
          />

          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="bg-gray-400 text-white px-4 py-2 rounded"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="bg-blue-600 text-white px-4 py-2 rounded"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserEditModal;
