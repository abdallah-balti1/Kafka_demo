import React, { useState, useEffect } from "react";
import { updateUser } from "service/users";
import { assignUserToPoc } from "services/userpocservice";
import { fetchPocs } from "services/pocs";
import axios from "axios";
import { User } from "schemas/user";
import { Poc } from "schemas/pocs";

type Props = {
    user: User;
    onClose: () => void;
    onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
    const [formData, setFormData] = useState<User>({ ...user });
    const [pocs, setPocs] = useState<Poc[]>([]);
    const [selectedPoc, setSelectedPoc] = useState<Poc | null>(null);
    const [startUsing, setStartUsing] = useState("");
    const [endUsing, setEndUsing] = useState("");
    const [error, setError] = useState("");
    const [isLoading, setIsLoading] = useState(false);

    useEffect(() => {
        const loadData = async () => {
            try {
                const pocsList = await fetchPocs();
                setPocs(pocsList);

                const response = await axios.get(`/manage/pocs/user/${user.userId}`);
                const userPoc = response.data?.poc;

                if (userPoc) {
                    const matchedPoc = pocsList.find((p) => p.id === userPoc.id) || userPoc;
                    setSelectedPoc(matchedPoc);
                    setStartUsing(response.data.startUsing);
                    setEndUsing(response.data.endUsing);
                }
            } catch (error) {
                console.warn('No POC assigned to this user or failed to load data');
            }
        };

        loadData();
    }, [user.userId]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError("");
        setIsLoading(true);

        try {
            // Validate dates if POC is selected
            if (selectedPoc) {
                if (!startUsing || !endUsing) {
                    throw new Error("Both start and end dates are required");
                }
                if (new Date(endUsing) <= new Date(startUsing)) {
                    throw new Error("End date must be after start date");
                }
            }

            // Update user details
            await updateUser(formData.userId, formData);

            // Handle POC assignment if selected
            if (selectedPoc && startUsing && endUsing) {
                await assignUserToPoc(
                    formData,      // User object
                    selectedPoc,   // Poc object
                    startUsing,    // start date string
                    endUsing       // end date string
                );
            }

            onSuccess();
            onClose();
        } catch (err) {
            console.error("Error updating user:", err);
            setError(err instanceof Error ? err.message : "Failed to update user");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
            <div className="bg-white rounded shadow-lg w-full max-w-md">
                <form onSubmit={handleSubmit} className="p-6">
                    <h2 className="text-xl font-bold mb-4">Update User</h2>
                    
                    {error && <p className="text-red-600 mb-4">{error}</p>}

                    <div className="mb-4">
                        <label className="block font-medium mb-1">User ID</label>
                        <input
                            type="text"
                            name="userId"
                            value={formData.userId}
                            readOnly
                            className="w-full border p-2 rounded bg-gray-100 cursor-not-allowed"
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block font-medium mb-1">First Name</label>
                        <input
                            type="text"
                            name="firstName"
                            placeholder="First Name"
                            value={formData.firstName}
                            onChange={handleChange}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block font-medium mb-1">Last Name</label>
                        <input
                            type="text"
                            name="lastName"
                            placeholder="Last Name"
                            value={formData.lastName}
                            onChange={handleChange}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block font-medium mb-1">Email</label>
                        <input
                            type="email"
                            name="mail"
                            placeholder="Email"
                            value={formData.mail}
                            onChange={handleChange}
                            className="w-full border p-2 rounded"
                            required
                        />
                    </div>

                    <div className="mb-4">
                        <label className="block font-medium mb-1">Assign POC</label>
                        <select
                            value={selectedPoc?.id || ""}
                            onChange={(e) => {
                                const poc = pocs.find((p) => p.id === e.target.value);
                                setSelectedPoc(poc || null);
                                // Reset dates when changing POC
                                setStartUsing("");
                                setEndUsing("");
                            }}
                            className="w-full border p-2 rounded"
                        >
                            <option value="">-- Select a POC --</option>
                            {pocs.map((poc) => (
                                <option key={poc.id} value={poc.id}>
                                    {poc.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    {selectedPoc && (
                        <>
                            <div className="mb-4">
                                <label className="block font-medium mb-1">Start Date</label>
                                <input
                                    type="date"
                                    value={startUsing}
                                    onChange={(e) => setStartUsing(e.target.value)}
                                    className="w-full border p-2 rounded"
                                    required
                                />
                            </div>

                            <div className="mb-4">
                                <label className="block font-medium mb-1">End Date</label>
                                <input
                                    type="date"
                                    value={endUsing}
                                    onChange={(e) => setEndUsing(e.target.value)}
                                    className="w-full border p-2 rounded"
                                    required
                                />
                            </div>
                        </>
                    )}

                    <div className="flex justify-end space-x-4 pt-4">
                        <button
                            type="button"
                            onClick={onClose}
                            disabled={isLoading}
                            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 disabled:opacity-50"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            disabled={isLoading}
                            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
                        >
                            {isLoading ? "Saving..." : "Save"}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default UserEditModal;
