import React, { useState, useEffect } from "react";
import { getUsersWithPocs, updateUser } from "services/users";
import { assignUserToPoc, removeUserPoc } from "services/userPocService";
import { fetchPocs } from "services/pocs";
import { User } from "schemas/user";
import { Pocs } from "schemas/pocs";
import { ClipLoader } from "react-spinners";

type Props = {
  user: User;
  onClose: () => void;
  onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
  const [formData, setFormData] = useState<User>({ ...user });
  const [allPocs, setAllPocs] = useState<Pocs[]>([]);
  const [selectedPocId, setSelectedPocId] = useState<string>("");
  const [selectedPocIds, setSelectedPocIds] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState({
    initial: true,
    form: false,
    pocs: false,
  });
  const [error, setError] = useState("");

  useEffect(() => {
    const loadData = async () => {
      setIsLoading((prev) => ({ ...prev, pocs: true }));
      try {
        const [pocs, users] = await Promise.all([
          fetchPocs(),
          getUsersWithPocs(),
        ]);
        
        setAllPocs(pocs);
        const currentUser = users.find((u) => u.userId === user.userId);
        
        if (currentUser) {
          if (currentUser.role === "poc_tester" && currentUser.pocs?.[0]) {
            setSelectedPocId(currentUser.pocs[0].id);
          } else if (
            (currentUser.role === "squad_team" || currentUser.role === "admin") &&
            currentUser.pocs
          ) {
            setSelectedPocIds(currentUser.pocs.map((poc) => poc.id));
          }
        }
      } catch (err) {
        console.error("Failed to load data:", err);
        setError("Failed to load POC data");
      } finally {
        setIsLoading((prev) => ({ ...prev, initial: false, pocs: false }));
      }
    };
    loadData();
  }, [user.userId]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSinglePocChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedPocId(e.target.value);
  };

  const handleMultiplePocChange = (pocId: string) => {
    setSelectedPocIds((prev) =>
      prev.includes(pocId) ? prev.filter((id) => id !== pocId) : [...prev, pocId]
    );
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsLoading((prev) => ({ ...prev, form: true }));

    try {
      // First update the user's basic info
      await updateUser(formData.userId, formData);
      
      // Then handle POC assignments based on role
      const users = await getUsersWithPocs();
      const currentUser = users.find((u) => u.userId === user.userId);
      const currentPocs = currentUser?.pocs || [];

      if (formData.role === "poc_tester") {
        // For POC testers (single POC selection)
        if (selectedPocId) {
          const selectedPoc = allPocs.find((poc) => poc.id === selectedPocId);
          if (selectedPoc && !currentPocs.some((poc) => poc.id === selectedPoc.id)) {
            await assignUserToPoc(formData, selectedPoc, selectedPoc.startDate, selectedPoc.endDate);
          }
        }
        // Remove any POCs that aren't the selected one
        const pocsToRemove = currentPocs.filter((poc) => poc.id !== selectedPocId);
        await Promise.all(pocsToRemove.map((poc) => removeUserPoc(formData, poc)));
      } else if (formData.role === "squad_team" || formData.role === "admin") {
        // For squad team and admin (multiple POC selection)
        const selectedPocs = allPocs.filter((poc) => selectedPocIds.includes(poc.id));
        
        // Add new POCs that weren't previously assigned
        await Promise.all(
          selectedPocs.map((poc) => {
            if (!currentPocs.some((cp) => cp.id === poc.id)) {
              return assignUserToPoc(formData, poc, poc.startDate, poc.endDate);
            }
            return Promise.resolve();
          })
        );
        
        // Remove POCs that were previously assigned but are no longer selected
        const pocsToRemove = currentPocs.filter((poc) => !selectedPocIds.includes(poc.id));
        await Promise.all(pocsToRemove.map((poc) => removeUserPoc(formData, poc)));
      }

      onSuccess();
      onClose();
    } catch (err) {
      console.error("Submission error:", err);
      setError(err instanceof Error ? err.message : "Failed to save changes");
    } finally {
      setIsLoading((prev) => ({ ...prev, form: false }));
    }
  };

  if (isLoading.initial) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white p-3 rounded-lg shadow-xl w-full max-w-md flex flex-col items-center">
          <ClipLoader size={40} color="#059669" />
          <p className="mt-4 text-gray-600">Loading user data...</p>
        </div>
      </div>
    );
  }

  const isPocTester = formData.role === "poc_tester";
  const isMultipleSelection = formData.role === "squad_team" || formData.role === "admin";

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
      style={{ fontFamily: "EWPP Sans, sans-serif" }}>
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
        <form onSubmit={handleSubmit} className="p-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold text-gray-800">Edit User</h2>
            <button
              type="button"
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-2xl"
              disabled={isLoading.form}
            >
              &times;
            </button>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
              {error}
            </div>
          )}

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">User ID</label>
              <input
                type="text"
                value={formData.userId}
                readOnly
                className="w-full p-2 border border-gray-300 rounded-md bg-gray-50"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleInputChange}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                required
                disabled={isLoading.form}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleInputChange}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                required
                disabled={isLoading.form}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input
                type="email"
                name="mail"
                value={formData.mail}
                onChange={handleInputChange}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                required
                disabled={isLoading.form}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
              <select
                name="role"
                value={formData.role}
                onChange={handleSelectChange}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                disabled={isLoading.form}
              >
                <option value="poc_tester">POC tester</option>
                <option value="squad_team">SQUAD team</option>
                <option value="admin">Admin</option>
              </select>
            </div>

            {isPocTester && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Select POC</label>
                <select
                  value={selectedPocId}
                  onChange={handleSinglePocChange}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  disabled={isLoading.pocs || isLoading.form}
                >
                  <option value="">-- Select a POC --</option>
                  {allPocs.map((poc) => (
                    <option key={poc.id} value={poc.id}>
                      {poc.name}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {isMultipleSelection && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Select POCs (multiple allowed)
                </label>
                <div className="border p-3 rounded max-h-40 overflow-y-auto bg-gray-50">
                  {allPocs.map((poc) => (
                    <div key={poc.id} className="flex items-center space-x-2 mb-2">
                      <input
                        type="checkbox"
                        id={`poc-${poc.id}`}
                        checked={selectedPocIds.includes(poc.id)}
                        onChange={() => handleMultiplePocChange(poc.id)}
                        className="h-4 w-4"
                      />
                      <label htmlFor={`poc-${poc.id}`} className="text-sm cursor-pointer">
                        {poc.name}
                      </label>
                    </div>
                  ))}
                </div>
                {selectedPocIds.length > 0 && (
                  <p className="text-sm text-gray-600 mt-1">
                    {selectedPocIds.length} POC(s) selected
                  </p>
                )}
              </div>
            )}
          </div>

          <div className="flex justify-end space-x-3 mt-6 pt-4 border-t border-gray-200">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
              disabled={isLoading.form}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-emerald-800 text-white rounded-md hover:bg-emerald-700 transition-colors flex items-center justify-center min-w-24"
              disabled={isLoading.form}
            >
              {isLoading.form ? (
                <>
                  <ClipLoader size={20} color="#ffffff" className="mr-2" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserEditModal;
