import React, { useState, useEffect } from "react";
import { updateUser } from "services/users";
import { fetchPocs } from "services/pocs";

type Props = {
  user: {
    userId: string;
    firstName: string;
    lastName: string;
    mail: string;
  };
  onClose: () => void;
  onSuccess: () => void;
};

const UserEditModal: React.FC<Props> = ({ user, onClose, onSuccess }) => {
  const [formData, setFormData] = useState(user);
  const [pocs, setPocs] = useState<Array<{ id: string; name: string }>>([]);
  const [selectedPocId, setSelectedPocId] = useState<string>("");
  const [error, setError] = useState("");

  useEffect(() => {
    setFormData({ ...user });

    const loadData = async () => {
      try {
        const fetchedPocs = await fetchPocs();
        setPocs(fetchedPocs);

        // Fetch user’s associated POC
        const response = await fetch(`/manage/pocs/user/${user.userId}`);
        const result = await response.json();

        if (result.poc && result.poc.id) {
          setSelectedPocId(result.poc.id);
        } else {
          setSelectedPocId("");
        }
      } catch (err) {
        console.error("Error loading POCs or user POC:", err);
      }
    };

    loadData();
  }, [user]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    try {
      await updateUser(formData.userId, formData);

      if (selectedPocId) {
        // Assuming assignUserToPoc exists and imported
        await assignUserToPoc(formData.userId, selectedPocId);
      }

      onSuccess();
      onClose();
    } catch (err) {
      console.error("Erreur mise à jour :", err);
      setError("Échec de la mise à jour.");
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded shadow-lg w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Update user</h2>
        {error && <p className="text-red-600 mb-2">{error}</p>}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block font-medium">UID</label>
            <input
              type="text"
              name="userId"
              value={formData.userId}
              readOnly
              className="w-full border p-2 rounded bg-gray-100 cursor-not-allowed"
            />
          </div>
          <div>
            <label className="block font-medium">First Name</label>
            <input
              type="text"
              name="firstName"
              placeholder="Prénom"
              value={formData.firstName}
              onChange={handleChange}
              className="w-full border p-2 rounded"
              required
            />
          </div>
          <div>
            <label className="block font-medium">Last Name</label>
            <input
              type="text"
              name="lastName"
              placeholder="Nom"
              value={formData.lastName}
              onChange={handleChange}
              className="w-full border p-2 rounded"
              required
            />
          </div>
          <div>
            <label className="block font-medium">Email</label>
            <input
              type="email"
              name="mail"
              placeholder="Email"
              value={formData.mail}
              onChange={handleChange}
              className="w-full border p-2 rounded"
              required
            />
          </div>
          <div>
            <label className="block font-medium">Associate POC</label>
            <select
              value={selectedPocId}
              onChange={(e) => setSelectedPocId(e.target.value)}
              className="w-full border p-2 rounded"
            >
              <option value="">-- Sélectionner un POC --</option>
              {pocs.map((poc) => (
                <option key={poc.id} value={poc.id}>
                  {poc.name}
                </option>
              ))}
            </select>
          </div>
          <div className="flex justify-end space-x-4 pt-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
            >
              Annuler
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Enregistrer
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default UserEditModal;
