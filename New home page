import React, { useState, useEffect } from "react";
import { getPocs } from "../services/pocs";
import { decodeToken } from "../utils/auth";
import { useNavigate } from "react-router-dom";
import Alert from "@mui/material/Alert";
import CircularProgress from "@mui/material/CircularProgress";

interface POCApp {
  id: string;
  name: string;
  url: string;
}

const HomePage = () => {
  const [pccApps, setPccApps] = useState<POCApp[]>([]);
  const [authorizedPocIds, setAuthorizedPocIds] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userRole, setUserRole] = useState<string>("guest");
  const [userId, setUserId] = useState<string>("");
  const navigate = useNavigate();

  useEffect(() => {
    // Get user role and ID from token
    const token = localStorage.getItem("access_token");
    if (token) {
      try {
        const decoded = decodeToken(token);
        setUserRole(decoded.role);
        setUserId(decoded.userId); // Assuming token contains userId
      } catch (err) {
        console.error("Token decoding failed:", err);
        setUserRole("guest");
      }
    }

    const fetchData = async () => {
      try {
        const pocs = await getPocs();
        setPccApps(pocs);

        // If user is admin, they can access all POCs
        if (userRole === "admin") {
          setAuthorizedPocIds(pocs.map(poc => poc.id));
        } else if (userId) {
          // For regular users, fetch their authorized POCs
          const response = await fetch(`/manage/pocs/user/${userId}`);
          if (!response.ok) throw new Error("Failed to fetch authorized POCs");
          const data = await response.json();
          setAuthorizedPocIds(data.map((poc: { id: string }) => poc.id));
        }
      } catch (err) {
        setError(err.message || "Failed to load data");
        console.error("Fetch error:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [userRole, userId]);

  const handlePocClick = (pocId: string, url: string) => {
    if (authorizedPocIds.includes(pocId)) {
      window.open(url, '_blank');
    } else {
      alert('You are not authorized to access this POC');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-6 flex items-center justify-center">
        <div className="text-center">
          <CircularProgress />
          <p className="mt-4 text-gray-600">Loading POCs...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6 flex items-center justify-center">
        <Alert severity="error" className="max-w-md">
          {error}
          <button 
            onClick={() => window.location.reload()}
            className="mt-2 ml-2 px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm"
          >
            Retry
          </button>
        </Alert>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="text-center mb-8">
        <div className="flex justify-center mb-6">
          <img 
            src="/logo.png" 
            alt="Company Logo" 
            className="h-20 w-auto object-contain"
          />
        </div>
        
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          Welcome{userRole === 'admin' ? ' Admin' : ''} to the Dashboard
        </h1>
        <p className="text-gray-600">
          {userRole === 'admin' 
            ? 'Manage all POCs below' 
            : 'Access your authorized POCs below'}
        </p>
      </div>

      <div className="flex flex-wrap justify-center gap-8">
        {pccApps.map((app) => {
          const isAuthorized = authorizedPocIds.includes(app.id) || userRole === 'admin';
          
          return (
            <div
              key={app.id}
              onClick={() => handlePocClick(app.id, app.url)}
              className={`bg-white shadow-lg rounded-xl p-6 border transition-all w-64 flex flex-col items-center cursor-pointer
                ${isAuthorized 
                  ? 'border-gray-200 hover:shadow-xl hover:scale-105' 
                  : 'border-gray-100 opacity-70 cursor-not-allowed'}
              `}
            >
              <img
                src="/logo.png"
                alt={app.name}
                className="w-20 h-20 object-contain mb-4"
              />
              <p className={`text-center font-semibold ${
                isAuthorized ? 'text-blue-600' : 'text-gray-400'
              }`}>
                {app.name}
              </p>
              {!isAuthorized && (
                <p className="text-xs text-gray-400 mt-1">Not authorized</p>
              )}
              {userRole === 'admin' && (
                <p className="text-xs text-green-600 mt-1">Admin Access</p>
              )}
            </div>
          );
        })}
      </div>

      {userRole === 'admin' && (
        <div className="mt-8 text-center">
          <button
            onClick={() => navigate('/pocs')}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Manage POCs
          </button>
        </div>
      )}
    </div>
  );
};

export default HomePage;
