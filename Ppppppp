import React, { useState, useEffect } from "react";
import { v4 as uuidv4 } from "uuid";
import { createUser } from "../services/userService";
import { assignUserToPoc } from "../services/userPocService";
import { fetchPocs } from "../services/pocService";
import { Pocs } from "../schemas/pocs";

interface UserFormData {
  userId: string;
  firstName: string;
  lastName: string;
  mail: string;
  role: string;
  active: boolean;
  creationDate: string;
  pocUid: string;
}

const UserCreateForm: React.FC = () => {
  const [formData, setFormData] = useState<UserFormData>({
    userId: uuidv4(),
    firstName: "",
    lastName: "",
    mail: "",
    role: "user",
    active: true,
    creationDate: new Date().toISOString().split("T")[0],
    pocUid: "",
  });

  const [pocs, setPocs] = useState<Pocs[]>([]);

  useEffect(() => {
    const loadPocs = async () => {
      try {
        const fetchedPocs = await fetchPocs();
        setPocs(fetchedPocs);
      } catch (err) {
        console.error("Failed to fetch POCs", err);
      }
    };

    loadPocs();
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value, type, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createUser(formData);
      if (formData.pocUid) {
        await assignUserToPoc(formData.userId, formData.pocUid);
      }
      alert("User created successfully");
    } catch (error) {
      console.error("Failed to create user", error);
      alert("Error creating user");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 p-4 bg-white rounded shadow">
      <h2 className="text-xl font-bold">Create User</h2>

      <input
        type="text"
        name="firstName"
        placeholder="First Name"
        value={formData.firstName}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />

      <input
        type="text"
        name="lastName"
        placeholder="Last Name"
        value={formData.lastName}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />

      <input
        type="email"
        name="mail"
        placeholder="Email"
        value={formData.mail}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />

      <select
        name="role"
        value={formData.role}
        onChange={handleChange}
        className="w-full border p-2 rounded"
      >
        <option value="user">User</option>
        <option value="admin">Admin</option>
      </select>

      <label className="flex items-center space-x-2">
        <input
          type="checkbox"
          name="active"
          checked={formData.active}
          onChange={handleChange}
        />
        <span>Active</span>
      </label>

      <input
        type="date"
        name="creationDate"
        value={formData.creationDate}
        onChange={handleChange}
        className="w-full border p-2 rounded"
      />

      <select
        name="pocUid"
        value={formData.pocUid}
        onChange={handleChange}
        className="w-full border p-2 rounded"
      >
        <option value="">Select POC</option>
        {pocs.map((poc) => (
          <option key={poc.id} value={poc.id}>
            {poc.name}
          </option>
        ))}
      </select>

      <button
        type="submit"
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
      >
        Create
      </button>
    </form>
  );
};

export default UserCreateForm;
