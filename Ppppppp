import React, { useState, useEffect } from "react";
import { createUser } from "@/services/users";
import { assignUserToPoc } from "@/services/userPocService";
import { fetchPocs } from "@/services/pocs";
import { User } from "@/schemas/user";
import { Pocs } from "@/schemas/pocs";

interface UserCreateFormProps {
  onSuccess: () => void;
  onCancel: () => void;
}

const UserCreateForm: React.FC<UserCreateFormProps> = ({ onSuccess, onCancel }) => {
  const [formData, setFormData] = useState<User>({
    userId: "",
    firstName: "",
    lastName: "",
    mail: "",
    role: "user",
    active: true,
  });

  const [pocs, setPocs] = useState<Pocs[]>([]);
  const [selectedPocId, setSelectedPocId] = useState<string>("");

  useEffect(() => {
    const loadPocs = async () => {
      const result = await fetchPocs();
      setPocs(result);
    };
    loadPocs();
  }, []);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value, type, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createUser(formData);

      const selectedPoc = pocs.find((p) => p.id === selectedPocId);
      if (!selectedPoc) {
        alert("Please select a POC");
        return;
      }

      const startUsing = new Date().toISOString().split("T")[0];
      const endUsing = new Date(
        new Date().setMonth(new Date().getMonth() + 1)
      )
        .toISOString()
        .split("T")[0];

      await assignUserToPoc(formData, selectedPoc, startUsing, endUsing);
      onSuccess();
    } catch (error) {
      console.error("Error creating user or assigning POC:", error);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* same form inputs as before */}
      {/* ... */}
    </form>
  );
};

export default UserCreateForm;
