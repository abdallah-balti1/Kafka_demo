import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { createUser } from "@/services/userService";
import { fetchPocs } from "@/services/pocService";
import { assignUserToPoc } from "@/services/userPocService";

interface Poc {
  uid: string;
  name: string;
}

export const UserCreateForm = ({ onUserCreated }: { onUserCreated: () => void }) => {
  const [formData, setFormData] = useState({
    userId: uuidv4(),
    firstName: "",
    lastName: "",
    mail: "",
    role: "user",
    active: true,
    creationDate: new Date().toISOString().split("T")[0],
    pocUid: "",
  });

  const [pocs, setPocs] = useState<Poc[]>([]);

  useEffect(() => {
    const loadPocs = async () => {
      try {
        const res = await fetchPocs();
        setPocs(res.data);
      } catch (err) {
        console.error("Failed to fetch POCs", err);
      }
    };

    loadPocs();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // 1. Create user
      await createUser({
        userId: formData.userId,
        firstName: formData.firstName,
        lastName: formData.lastName,
        mail: formData.mail,
        role: formData.role,
        active: formData.active,
        creationDate: formData.creationDate,
      });

      // 2. Assign to POC if selected
      if (formData.pocUid) {
        await assignUserToPoc({
          userId: formData.userId,
          pocUid: formData.pocUid,
        });
      }

      onUserCreated();
      alert("User created and assigned to POC!");
    } catch (err) {
      console.error("Error:", err);
      alert("Error creating user or assigning to POC.");
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-xl mx-auto space-y-4 p-4 border rounded shadow">
      <h2 className="text-2xl font-semibold text-center">Create New User</h2>

      <input
        type="text"
        name="firstName"
        placeholder="First Name"
        value={formData.firstName}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />
      <input
        type="text"
        name="lastName"
        placeholder="Last Name"
        value={formData.lastName}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />
      <input
        type="email"
        name="mail"
        placeholder="Email"
        value={formData.mail}
        onChange={handleChange}
        className="w-full border p-2 rounded"
        required
      />

      <select
        name="role"
        value={formData.role}
        onChange={handleChange}
        className="w-full border p-2 rounded"
      >
        <option value="user">User</option>
        <option value="admin">Admin</option>
      </select>

      <label className="flex items-center space-x-2">
        <input
          type="checkbox"
          name="active"
          checked={formData.active}
          onChange={handleChange}
        />
        <span>Active</span>
      </label>

      <label className="block font-medium mt-2">Assign to a POC</label>
      <select
        name="pocUid"
        value={formData.pocUid}
        onChange={handleChange}
        className="w-full border p-2 rounded"
      >
        <option value="">-- Select POC --</option>
        {pocs.map((poc) => (
          <option key={poc.uid} value={poc.uid}>
            {poc.name}
          </option>
        ))}
      </select>

      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
      >
        Create User
      </button>
    </form>
  );
};
