import React, { useState, useEffect } from "react";
import { createUserAndAssignPoc } from "services/users";
import { fetchPocs } from "services/pocs";
import { User } from "types/user";
import { Poc } from "types/poc";

type Props = {
  onSuccess: () => void;
  onCancel: () => void;
};

const UserCreateForm: React.FC<Props> = ({ onSuccess, onCancel }) => {
  const [formData, setFormData] = useState<Partial<User>>({});
  const [pocs, setPocs] = useState<Poc[]>([]);
  const [selectedPoc, setSelectedPoc] = useState<string>("");

  useEffect(() => {
    const loadPocs = async () => {
      const fetchedPocs = await fetchPocs();
      setPocs(fetchedPocs);
    };
    loadPocs();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedPoc) return;

    await createUserAndAssignPoc(formData, selectedPoc);
    onSuccess();
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <input
        type="text"
        name="firstName"
        placeholder="First Name"
        onChange={handleChange}
        className="border rounded px-2 py-1 w-full"
        required
      />
      <input
        type="text"
        name="lastName"
        placeholder="Last Name"
        onChange={handleChange}
        className="border rounded px-2 py-1 w-full"
        required
      />
      <input
        type="email"
        name="mail"
        placeholder="Email"
        onChange={handleChange}
        className="border rounded px-2 py-1 w-full"
        required
      />
      <input
        type="text"
        name="role"
        placeholder="Role"
        onChange={handleChange}
        className="border rounded px-2 py-1 w-full"
        required
      />
      <select
        value={selectedPoc}
        onChange={(e) => setSelectedPoc(e.target.value)}
        className="border rounded px-2 py-1 w-full"
        required
      >
        <option value="">Select a POC</option>
        {pocs.map((poc) => (
          <option key={poc.uid} value={poc.uid}>
            {poc.name}
          </option>
        ))}
      </select>

      <div className="flex justify-end space-x-2">
        <button
          type="button"
          onClick={onCancel}
          className="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          Create
        </button>
      </div>
    </form>
  );
};

export default UserCreateForm;
